# -*- coding: utf-8 -*-

# 1. lancer phred sur la séquence abi en entrée.
# 2. lancer muscle avec pour entrée le fichier d'alignement fst entre
#    le gène synthétique et la séquence sauvage d'une part, et la
#    séquence dans le fichier seq d'autre part.
# 3. analyser la sortie de phred .phd pour extraire l'information de
#    la qualité de la base.

from Bio import AlignIO  # permet d'analyser les sorties de muscle.
from Bio import SeqIO  # permet de tester les entrées
import subprocess as sub  # permet de lancer phred et muscle
import click
import os.path
import numpy as np
import pandas as pd


def is_abi(sequence):
    """Cette fonction détermine si une séquence est bien un fichier spectrogramme.
    Renvoit TRUE ou FALSE."""
    assert os.path.isfile(sequence), "Le fichier n'existe pas."

    with open(sequence,
              "rb") as input:  # le fichier doit être ouvert en mode "rb"
        if len(SeqIO.read(
                input,
                "abi").id) > 0:  # teste la longueur de l'id de la séquence
            return True
        else:
            return False


def is_fasta(sequence):
    """Cette fonction détermine si une séquence est bien un fichier fasta.
    Renvoit True ou False."""
    assert os.path.isfile(sequence), "Le fichier n'existe pas"

    with open(sequence, "rb") as input:
        seq_list = []
        for record in SeqIO.parse(input, "fasta"):
            seq_list.append(len(record.id))  # crée une liste de longueur d'id.

    if 0 not in seq_list:  # s'il n'y a pas d'identifiant nul
        return True  # c'est bon.
    else:
        return False


def run_phred(input, cutoff):
    """Cette fonction utilise phred sur la séquence .abi en entrée.
    Test: entrée de type abi."""
    assert is_abi(input), "La séquence n'est pas un fichier de sequençage."

    # phred reads and process file listed in the file input via `-if`.
    # we must then create a temporary file containing only the name of the input.
    with open('tempfile', 'w') as tempfile:
        tempfile.write(input + "\n")

    # subprocess.call takes a list of argument as input.
    # the following list describes the phred list of argument.
    phred = [
        "phred",
        "-st",
        "fasta",  # sequence type output (default = fasta)
        "-trim_alt",
        "\"\"",  # quality trim
        "-trim_cutoff",
        str(cutoff),  # error probability of trimming
        "-trim_fasta",  # trim sortie fasta.
        "-trim_phd",  # trim sortie phd
        "-s",  # write seq file, append ".seq" to the names of the input files
        "-d",  # write a poly file
        "-p",  # write a phd file
        "-if",
        "tempfile"  # input file
    ]
    phred_call = sub.call(phred)
    os.remove("tempfile")  # supprime le fichier temporaire
    return phred_call


def run_muscle(input, reference):
    """Cette fonction lance muscle sur la séquence fasta en entrée.
    Test: entrée de type fasta."""
    assert is_fasta(reference), "La référence n'est pas un fichier fasta."
    assert is_fasta(input), "La séquence n'est pas un fichier fasta."

    muscle = [
        "muscle",
        "-quiet",  # non verbose
        "-profile",  # do not disrupt the profile alignment
        "-objscore",
        "ps",  # matrice de scoring
        "-maxmb",
        str(100),  # 1.5 G as max memory
        "-in1",
        input,
        "-in2",
        str(reference),  # profile is reference
        "-out",
        input + ".aln"  # append .aln to input name
    ]

    muscle_call = sub.call(muscle)  # call muscle on input
    return muscle_call  # return 0 or 1 if muscle is successful.


@click.group()
def phruscle():
    pass


@phruscle.command('basecall', short_help='Make basecall and alignment.')
@click.option('-i', '--input', help="Input sequence in ab1 or abi format")
@click.option('-r', '--ref', help="Reference alignment in fasta format")
@click.option('-c',
              '--cutoff',
              default=0.05,
              help="Probability of error of basecalling")
def run_phruscle(input, ref, cutoff):
    """This programme uses phred to call bases on the `--input` file to create a fasta file.
    Muscle align this fasta file to the `--reference`, without disrupting the reference,
    to get the localisation of SNPs and their polarity.

    """
    phred_code = run_phred(input, cutoff)
    if phred_code == 0:
        run_muscle(input + ".seq", ref)
    else:
        print "Phred failed."


def parse_muscle(align):
    """Cette fonction renvoit un dict comprenant 3 choses :
    1. la séquence alignée
    2. la séquence sauvage
    3. la séquence avec les SNP
    """
    assert is_fasta(align), "Le fichier n'est pas un fichier fasta"

    def read_seq(sequence, index):
        return AlignIO.read(sequence, "fasta")[index]

    return {
        'exp': str(read_seq(align, 0).seq),  # la séquence expérimentale
        'wt': str(read_seq(align, 1).seq),  # la séquence sauvage.
        'snp': str(read_seq(align, 2).seq)  # la séquence du gène synthétique
    }


def are_the_same(exp, snp, wt):
    """Détermine si les trois bases sont identiques. Renvoit `.` quand les trois bases sont
    identiques, `x` quand la base exp est la base `snp`, `X` quand la base exp est la base
    wt, et '-' quand la base exp ne correspond à aucune des possibilités

    """
    if exp == '-':
        return '-'
    elif exp == snp and snp == wt:
        return '.'
    elif exp == snp and snp != wt:
        return 'x'
    elif exp != snp and exp == wt:
        return 'X'
    else:
        return '-'


def index_seq(sequence):
    """Détermine la position dans la séquence expérimentale"""

    position = 0
    position_list = []
    for index, base in enumerate(sequence):
        if base != '-': position += 1
        position_list.append(str(position))

    return position_list


def polarity_snp(align):
    """Détermine la polarité des SNP, WT ou GS."""
    muscle_output = parse_muscle(align)

    consensus = []
    for i, base in enumerate(muscle_output['exp']):
        exp = muscle_output['exp'][i]
        snp = muscle_output['snp'][i]
        wt = muscle_output['wt'][i]

        consensus += are_the_same(
            exp, snp, wt)  # + ',' + exp + '\n' # + sortie de parse_phd

    return consensus


def parse_phd(align):
    """Renvoit une DataFrame à partir de la sortie phd de phred.

    """
    return pd.read_table(align,
                         sep=" ",
                         skiprows=20, # FRAGILE. peut être utiliser une autre fonction
                         # pour définir où commence la séquence, ou pour
                         # nettoyer la sortie phd de phred
                         skipfooter=3, # idem, moins sensible normalement.
                         engine='python', # nécessaire pour skipfooter
                         names=['base', 'qual', 'phase']) # 'phase' est la position dans
    # le spectrogramme.


@phruscle.command('table', short_help="Make a table of SNP qual and polarity")
@click.option('-i', '--input', help="The abi file to make table with")
def clean_output(input):
    """"""
    assert is_abi(input), "Input is not an abi file"

    parse_align = parse_muscle(input + ".seq.aln")

    clean_data = pd.DataFrame({
        'seqp': index_seq(parse_align['exp']),
        'refp': index_seq(parse_align['wt']),
        'cons': polarity_snp(input + ".seq.aln")
    })

    with_phd = pd.concat(
        [
            clean_data[clean_data.cons != '-'].reset_index(
                drop=
                True),  # ne garde que les positions qui existent dans le phd file
            parse_phd(input + ".phd.1")
        ],
        axis=1,
        ignore_index=True)
    with_phd.columns = ['cons', 'refp', 'seqp', 'base', 'qual', 'phase']

    return with_phd

# (X) if __name__ == '__main__':
# (X)     run_phruscle()
